require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/all_casa_admins/patch_notes", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # PatchNote. As you add validations to PatchNote, be sure to
  # adjust the attributes here as well.
  let(:all_casa_admin) { build(:all_casa_admin) }
  let(:patch_note_group) { create(:patch_note_group) }
  let(:patch_note_type) { create(:patch_note_type) }

  let(:valid_attributes) do
    {
      note: "not an empty note",
      patch_note_group_id: patch_note_group.id,
      patch_note_type_id: patch_note_type.id
    }
  end

  let(:invalid_attributes) do
    {
      note: "",
      patch_note_group_id: patch_note_group.id + 1,
      patch_note_type_id: patch_note_type.id + 1
    }
  end

  before { sign_in all_casa_admin }

  describe "GET /index" do
    it "renders a successful response" do
      PatchNote.create! valid_attributes
      get all_casa_admins_patch_notes_path
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new PatchNote" do
        expect {
          post all_casa_admins_patch_notes_path, params: valid_attributes
        }.to change(PatchNote, :count).by(1)
      end

      it "shows json indicating the patch note was created" do
        post all_casa_admins_patch_notes_path, params: valid_attributes
        expect(response.header["Content-Type"]).to match(/application\/json/)
        expect(response.body).not_to be_nil
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new PatchNote" do
        expect {
          post all_casa_admins_patch_notes_path, params: invalid_attributes
        }.not_to change(PatchNote, :count)
      end

      it "shows json indicating the patch note could not be created" do
        post all_casa_admins_patch_notes_path, params: invalid_attributes
        expect(response.header["Content-Type"]).to match(/application\/json/)
        expect(response.body).not_to be_nil
        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to have_key("errors")
      end

      it "shows json with the id of the patch note created" do
        post all_casa_admins_patch_notes_path, params: valid_attributes
        expect(response.header["Content-Type"]).to match(/application\/json/)
        expect(response.body).not_to be_nil
        expect(response).to have_http_status(:created)
        expect(JSON.parse(response.body)).to have_key("id")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:patch_note_group_2) { create(:patch_note_group) }
      let(:patch_note_type_2) { create(:patch_note_type) }

      let(:new_attributes) do
        {
          note: "a different update note",
          patch_note_group_id: patch_note_group_2.id,
          patch_note_type_id: patch_note_type_2.id
        }
      end

      it "updates the requested patch_note" do
        patch_note = PatchNote.create! valid_attributes
        patch all_casa_admins_patch_note_path(patch_note), params: new_attributes
        patch_note.reload
        expect(patch_note.note).to eq(new_attributes[:note])
        expect(patch_note.patch_note_group_id).to eq(patch_note_group_2.id)
        expect(patch_note.patch_note_type_id).to eq(patch_note_type_2.id)
      end

      it "renders a successful response (a json with an ok status)" do
        patch_note = PatchNote.create! valid_attributes
        patch all_casa_admins_patch_note_path(patch_note), params: new_attributes
        expect(response.header["Content-Type"]).to match(/application\/json/)
        expect(response.body).not_to be_nil
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (a json with a list of errors)" do
        patch_note = PatchNote.create! valid_attributes
        patch all_casa_admins_patch_note_path(patch_note), params: invalid_attributes
        expect(response.body).not_to be_nil
        expect(response).to have_http_status(:unprocessable_entity)
        expect(JSON.parse(response.body)).to have_key("errors")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested patch_note" do
      patch_note = PatchNote.create! valid_attributes
      expect {
        delete all_casa_admins_patch_note_path(patch_note)
      }.to change(PatchNote, :count).by(-1)
    end

    it "renders a successful response (a json with an ok status)" do
      patch_note = PatchNote.create! valid_attributes
      delete all_casa_admins_patch_note_path(patch_note)
      expect(response.header["Content-Type"]).to match(/application\/json/)
      expect(response.body).not_to be_nil
      expect(response).to have_http_status(:ok)
    end
  end
end
