---
# Config adapted from:
# https://evilmartians.com/chronicles/rubocoping-with-legacy-bring-your-ruby-code-up-to-standard

# To fix the file with the most offenses:
#  - BYPASS_RUBOCOP_TODO=1 bundle exec rubocop --format worst
#  - BYPASS_RUBOCOP_TODO=1 bundle exec rubocop path/to/worst_offender.rb -A

# If you want to fix by rule instead:
#  - BYPASS_RUBOCOP_TODO=1 bundle exec rubocop --format offenses
#    - add --display-only-safe-correctable to see only safe autocorrect-able offenses
#    - OR --display-only-correctable to see all autocorrect-able offenses
#  - BYPASS_RUBOCOP_TODO=1 bundle exec rubocop -A --only Department/Cop

# After fixes, regenerate the todo file with:
#  - bundle exec rubocop --regenerate-todo

inherit_mode:
  merge:
    - Exclude

require:
  - standard
  - standard-custom
  - standard-performance
  - rubocop-capybara
  - rubocop-factory_bot
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec
  - rubocop-rspec_rails

inherit_gem:
  pundit: config/rubocop-rspec.yml
  standard: config/ruby-3.2.yml
  standard-performance: config/base.yml
  standard-custom: config/base.yml
  standard-rails: config/base.yml

# yamllint disable
<% unless ENV['BYPASS_RUBOCOP_TODO'] %>
inherit_from: .rubocop_todo.yml
<% end %>
# yamllint enable

AllCops:
  ExtraDetails: true
  NewCops: enable
  SuggestExtensions: false
  Exclude:
    - 'bin/**/*'
    - 'db/migrate/2020*.rb'
    - 'db/migrate/2021*.rb'
    - 'db/migrate/2022*.rb'
    - 'db/migrate/2023*.rb'
    - 'db/migrate/202405*.rb'
    - 'db/migrate/202406*.rb'
    - 'lib/tasks/deployment/2020*'
    - 'lib/tasks/deployment/2021*'
    - 'lib/tasks/deployment/2022*'
    - 'lib/tasks/deployment/2023*'

# OVERRIDE .rubocop_todo.yml for these rules:
Lint/Debugger:
  # Don't leave binding.pry or debugger
  Enabled: true
  Exclude: []
  inherit_mode:
    override:
      - Exclude

Rails/Output:
  # Don't leave puts-debugging
  Enabled: true
  Exclude: []
  inherit_mode:
    override:
      - Exclude

Rails/FindEach:
  # each could severely affect performance, use find_each
  Enabled: true
  Exclude: []
  inherit_mode:
    override:
      - Exclude

Rails/UniqBeforePluck:
  # uniq.pluck and not pluck.uniq
  Enabled: true
  Exclude: []
  inherit_mode:
    override:
      - Exclude

RSpec/Focus:
  # ensure all tests run on CI
  Enabled: true
  Exclude: []
  inherit_mode:
    override:
      - Exclude

# CUSTOMIZED RULES
# FactoryBot
FactoryBot/ConsistentParenthesesStyle:
  # build/create are just method calls, no FactoryBot-specific rules needed
  Enabled: false

# Rails
Rails/DefaultScope:
  Enabled: true
  Details: >-
    Default scopes lead to unexpected behavior for future developers.

Rails/OrderById:
  Enabled: true

Rails/SaveBang:
  Enabled: true
  Include:
    - 'spec/**/*'
  Details: >-
    Specs should fail if setup record is invalid.

# RSpec
RSpec/ExampleLength:
  CountAsOne: ['array', 'hash', 'heredoc', 'method_call']
  Max: 15 # could be lower; default is 5
  Exclude:
    - 'spec/system/**/*'

RSpec/LetSetup:
  Details: >+
    let! leads to unnecessary database calls and obscures necessary setup.
    Instead, call a let var in the example, before block, or let block of a variable that depends on it-
      let(:necessary_thing) { create(:thing) }
      let(:dependent_thing) do
        necessary_thing
        create(:dependent_thing)
      end

RSpec/MultipleExpectations:
  # failures are aggregated by default (spec_helper.rb)
  Max: 10
  Exclude:
    - 'spec/system/**/*' # async behaviors may require expecting things on page

RSpec/MultipleMemoizedHelpers:
  Max: 20

RSpec/NamedSubject:
  Enabled: false

RSpec/NestedGroups:
  Max: 5

RSpec/NotToNot:
  # consistency only, no difference between to_not/not_to (these days)
  Enabled: false
